Script 515 (void)
{
    //if(!CheckActorInventory(ActivatorTID(), "MurderMarker"))
    //{
        //GiveActorInventory(ActivatorTID(), "ScriptDeath", 1);
        //Thing_Destroy(ActivatorTID(), true);
        //PrintBold(s:"\cd...and ", n:0, s:" \cdwas never heard from again.");
        GiveActorInventory(TID_START+gameinfo[2], "KillMarker", 1);
        GiveActorInventory(TID_START+gameinfo[2], "GetSuperSane", 1);
    //}
}

Script 408 Open
{
	if(GetCVar("wdi_disable_autoconfig") == True) Terminate;
	While(1)
	{
		if(getcvar("sv_respawnsuper") == False) Consolecommand("sv_respawnsuper true");
		if(getcvar("sv_coop_loseammo") == False) Consolecommand("sv_coop_loseammo true");
		if(getcvar("sv_coop_losepowerups") == False) Consolecommand("sv_coop_losepowerups true");
		if(getcvar("sv_coop_losearmor") == False) Consolecommand("sv_coop_losearmor true");
		if(getcvar("sv_coop_loseweapons") == False) Consolecommand("sv_coop_loseweapons true");
		if(getcvar("sv_coop_losekeys") == False) Consolecommand("sv_coop_losekeys true");
		if(getcvar("sv_coop_loseinventory") == False) Consolecommand("sv_coop_loseinventory true");
		if(getcvar("sv_forcegldefaults") == False) Consolecommand("sv_forcegldefaults true");
		if(getcvar("sv_disallowspying") == False) Consolecommand("sv_disallowspying true");
		if(getcvar("sv_disallowsuicide") == False) Consolecommand("sv_disallowsuicide true");
		if(getcvar("sv_noautomapallies") == False) Consolecommand("sv_noautomapallies true");
		if(getcvar("sv_noidentifytarget") == False) Consolecommand("sv_noidentifytarget true");
		if(getcvar("sv_randomcoopstarts") == False) Consolecommand("sv_randomcoopstarts true");
		if(getcvar("sv_nocoopinfo") == False) Consolecommand("sv_nocoopinfo true");
		if(getcvar("sv_weapondrop") == True) Consolecommand("sv_weapondrop false");
		
		if(getcvar("sv_applylmsspectatorsettings") == False && WDI_GameState() != GAMESTATE_GAMEOVER) Consolecommand("sv_applylmsspectatorsettings true");
		else if(getcvar("sv_applylmsspectatorsettings") == True && WDI_GameState() == GAMESTATE_GAMEOVER) Consolecommand("sv_applylmsspectatorsettings false");
		
		if(getcvar("compat_limited_airmovement") == False) Consolecommand("compat_limited_airmovement true");
		if(getcvar("compat_nocrosshair") == False) Consolecommand("compat_nocrosshair true");
		
		Delay(1);
	}
	Delay(1);
}

script 555 (void) // Backstab script
{
        if (FindPlayerBack(ActivatorTID(), 72) != -1) {
            SetResultValue(TRUE);
        } else {
            SetResultValue(FALSE);
        }
}

str blood[10] = { "blood0", "blood1", "blood2", "blood3", "blood4", "blood5", "blood6", "blood7", "blood8", "blood9" };
 
script 552 (int type) CLIENTSIDE //Type currently does nothing, but will be used to define what kind of spatter will be drawn.
{
	setfont(blood[random(0,9)]);	
	hudmessage(s:"a"; HUDMSG_FADEOUT, 5463, CR_UNTRANSLATED, random(0.0, 0.9), random(0.0, 0.9), random(1.5, 3.0), random(1.0, 2.0));
}

Script 713 (int state)
{
	switch(state)
	{
		case 0:
			bCameraState = FALSE;
			UpdateClient(5,0,bCameraState);
			break;
			
		case 1:
			bCameraState = TRUE;
			UpdateClient(5,0,bCameraState);
			break;
			
		case 2:
			bCameraState = FALSE;
			bCameraDestroyed = TRUE;
			UpdateClient(5,0,bCameraState);
			UpdateClient(6,0,bCameraDestroyed);
			break;
	}
}

Script 712 Enter clientside //onoff: 0 = off. 1 = on. 2 = destroyed.
{
	while(1)
	{
		if(CheckInventory("MurderMarker"))
		{
			//Camera turned on.
			if(ThingCountName("DeployedCamera", 0))
			{
				if(bCameraState)
				{
					bHideCamera = FALSE;
					switch (getaspectratio())
					{
						case ASPECT_4_3:
							setcameratotexture(1337, "RECAMTX", 90);
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 1.0); 
							setfont("TSTATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							break;

						case ASPECT_5_4:
							setcameratotexture(1337, "RECAMTX", 90);
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 1.0); 
							setfont("TSTATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							break;

						case ASPECT_16_9:
							setcameratotexture(1337, "RECAMTX", 90);
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 1.0); 
							setfont("TSTATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							break;

						case ASPECT_16_10:
							setcameratotexture(1337, "RECAMTX", 90);
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 1.0); 
							setfont("TSTATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							break;
					}
				}
				
				//Camera turned off. (By user)
				if(!bCameraState && !bHideCamera)
				{
					bHideCamera = TRUE;
					switch (getaspectratio())
					{
						case ASPECT_4_3:
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 1.0); 
							setfont("STATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							break;

						case ASPECT_5_4:
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 1.0); 
							setfont("STATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 1.0);
							break;

						case ASPECT_16_9:
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 1.0); 
							setfont("STATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							break;

						case ASPECT_16_10:
							sethudsize(1024, 768, 0);
							setfont("RECAMTX");
							hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 1.0); 
							setfont("STATIC1");
							hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							setfont("TVBORD");
							hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 1.0);
							break;
					}
				}
			}

			//Camera Destroyed.
			if(bCameraDestroyed && !bHideCamera)
			{
				bCameraDestroyed = FALSE;
				bCameraState = TRUE;
				bHideCamera = TRUE;
				switch (getaspectratio())
				{
					case ASPECT_4_3:
						setcameratotexture(1337, "RECAMTX", 90);
						sethudsize(1024, 768, 0);
						setfont("RECAMTX");
						hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 3.0); 
						setfont("TSTATIC1");
						hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
						setfont("CAMCRPT");
						hudmessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
						setfont("TVBORD");
						hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 3.0);

					case ASPECT_5_4:
						setcameratotexture(1337, "RECAMTX", 90);
						sethudsize(1024, 768, 0);
						setfont("RECAMTX");
						hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1123.0, 848.0, 3.0); 
						setfont("TSTATIC1");
						hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
						setfont("CAMCRPT");
						hudmessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
						setfont("TVBORD");
						hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 913.0, 688.0, 3.0);
						break;

					case ASPECT_16_9:
						setcameratotexture(1337, "RECAMTX", 90);
						sethudsize(1024, 768, 0);
						setfont("RECAMTX");
						hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 3.0); 
						setfont("TSTATIC1");
						hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						setfont("CAMCRPT");
						hudmessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						setfont("TVBORD");
						hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						break;

					case ASPECT_16_10:
						setcameratotexture(1337, "RECAMTX", 90);
						sethudsize(1024, 768, 0);
						setfont("RECAMTX");
						hudmessage(s:"a"; HUDMSG_PLAIN, 500, CR_UNTRANSLATED, 1295.0, 848.0, 3.0); 
						setfont("TSTATIC1");
						hudmessage(s:"a"; HUDMSG_PLAIN, 499, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						setfont("CAMCRPT");
						hudmessage(s:"a"; HUDMSG_PLAIN, 498, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						setfont("TVBORD");
						hudmessage(s:"a"; HUDMSG_PLAIN, 497, CR_UNTRANSLATED, 1085.0, 688.0, 3.0);
						break;
				}
				//UpdateClient(5,0,bCameraState);
				//UpdateClient(6,0,bCameraDestroyed);
			}
			
			Delay(1);
		}
		
		Delay(1);
	}
}

Script 711 (void) //IF STATEMENTS AAAAAAAAAA
{
    if(!ThingCountName("DeployedCamera", 0))
	{
		GiveInventory("RemoteCameraLauncher", 1);
		terminate;
	}
        
    if(ThingCountName("DeployedCamera", 0))
	{
		if(bCameraState)
		{
			bCameraState = FALSE;
			UpdateClient(5,0,bCameraState);
			terminate;
		}
			
		else if(!bCameraState)
		{
			bCameraState = TRUE;
			UpdateClient(5,0,bCameraState);
			terminate;
		}
	}
}

script 750 ENTER CLIENTSIDE
{
	if(GetCVar("wdi_filmgrain_level") <= 0)
	{
		SetCVar("wdi_filmgrain_level", 0);
	}
	
	while(1)
	{
		Switch(GetCVar("wdi_filmgrain_level"))
		{
			case 0:
				hudmessage(s:""; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 0.0, 0.0, 0.1);
				break;
				
			case 1:
				sethudsize(320, 200, 1);
				setfont("NOISE1"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE2"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE3"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE4"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE5"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE6"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE7"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625); delay(1);
				setfont("NOISE8"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 160.0, 100.0, 0.0625);
				break;
				
			case 2:
				sethudsize(640, 400, 1);
				setfont("NOISE1"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE2"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE3"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE4"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE5"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE6"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE7"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625); delay(1);
				setfont("NOISE8"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 320.0, 200.0, 0.0625);
				break;
				
			case 3:
				sethudsize(0, 0, 1); //FUNNY SIZE, AIN'T IT?
				setfont("NOISE1"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE2"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE3"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE4"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE5"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE6"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE7"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(2);
				setfont("NOISE8"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 1.5, 0.0, 0.0625); delay(1);
				break;
			case 4:
				sethudsize(1728, 1080, 1); //Super-res compat (e.g. 2560x1600, and who the hell uses that?)
				setfont("NOISE1"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE2"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE3"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE4"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE5"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE6"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE7"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(2);
				setfont("NOISE8"); hudmessage(s:"a"; HUDMSG_PLAIN, 77, CR_UNTRANSLATED, 864.0, 540.0, 0.0625); delay(1);
				break;
		}
		Delay(1);
	}
}

Script 751 (void)
{
	if(GetActorProperty(0, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH))
	{
		GiveInventory("SmallKitUsing",1);
		TakeInventory("SmallKit",1);
	}
}

Script 752 (void)
{
	for(int p = 0; p < 32; p++)
	{
		if(FDistance(0,TID_START+p) <= 132.0 && GetActorProperty(TID_START+p, APROP_HEALTH) < GetActorProperty(0, APROP_SPAWNHEALTH))
		{
			GiveActorInventory(TID_START+p, "Health", 5);
			GiveActorInventory(TID_START+p, "BigKitSparkle", 1);
		}
	}
}