/***************************************************************************
============================================================================


                                                                                                              '#'
                                                                                                              @@@
                                                                                                              +@@
                                    ;                                                                         @@.
              @        .#       #: +'                          '@#@@@;+,`                                     @@@
             @@.       @`       @  .@                           @@     ;@@@@`                                 @@@
              @.       +@       @  .@                           @'         #@@                              ..`@@..
              @@       @@`     .@   @                           @@          .@@`                             '@@@'
              @@       ;@@     #    @                           +@            @@                              @@@
              `@      + @@     @    @                           @@            .@.                             #@#   ;@
               @      @ `@     @    @                           #@             @#                             #@@   @@
               #@     #  @`    ;    @                           `@             @@                             @@@.  ++
               .@    ,.  +@   ;     @  +';       +@@,           ;.             @@  `#    ,'   ' .;#;          @@@  .#@`.'
                @+   #    @   @     @@@+@@@    #'   @#          .@             @:  @@    @+  .@+ : @#         @@@  .@#`#`
                #@   @    @'  @     @     @   @.     @+         `@            :@   @#    @+   @     @         @@@   '#
                 @   #    #@ ,.     @     @  .@      @@         .@            @,   @@    @:   +     ;         `@@   :'
                 @; +     `@ @      @     @  @+      #@         .@           .@    #;    +;   @     ,         #;@   ::
                 #@ @      @;@      @    `@  ;@      @.         `@           @:    @'    @.   @     :         +;#   ;:
                 :@ @      @@@      @     @  `@`    .@           @          @.     #+   '@#   @     @         ;'.   ;,  '
                  @@+      +@@      @    #@   `@@@+@`            @        ;@        @@;@`',   @     ;         ,:'   ,'+,
                  @@`       @;                                  .@      .@'                                   ,;.
                   @.       @;                                  ;@    #@`                                     ,.'
                   @        ,                                  ;@@@@#,                                        `+:
                                                                                                              ``.
                                                                                                               ``
                                                                                                                `
                                                                                                                `

Classic Mode Plugin

V4.0 Rigorously Re-Written by Theshooter7 (again)

============================================================================
***************************************************************************/

#library "classic"

#include "ZCommon.acs"

#import "./core/redrum.acs"

#include "game_generic.acs"

int x, y, z;


Script 400 Open //This script handles running the game mode progression, mostly using an event-driven system, though not entirely, as the progression cannot go backwards.
{
	if(GameType() == GAME_TITLE_MAP) Terminate;	// don't run on the titlemap

	//SpawnSpot("ActionMarkerWhite",254,256,0);
	//SpawnSpot("ActionMarkerBlue",255,257,0);
	
	// cvar stuff
	
	if(GetCVar("wdi_disable_autoconfig") <= 0)
	{
		ConsoleCommand("set wdi_disable_autoconfig 0");
		ConsoleCommand("archivecvar wdi_disable_autoconfig");
	}
	
	if(GetCVar("wdi_safety_time") < 5)
	{
		ConsoleCommand("set wdi_safety_time 30");
		ConsoleCommand("archivecvar wdi_safety_time");
	}
	
	if(GetCVar("wdi_murd_maxbonus") < 100)
	{
		ConsoleCommand("set wdi_murd_maxbonus 300");
		ConsoleCommand("archivecvar wdi_murd_maxbonus");
	}
	
	if(GetCVar("wdi_murd_healthbonus") <= 0)
	{
		ConsoleCommand("set wdi_murd_healthbonus 10");
		ConsoleCommand("archivecvar wdi_murd_healthbonus");
	}
	
	if(GetCVar("wdi_blacklist_rounds") <= 0)
	{
		ConsoleCommand("set wdi_blacklist_rounds 5");
		ConsoleCommand("archivecvar wdi_blacklist_rounds");
	}
	gameinfo[CLIENT_SAFETIMER] = GetCVar("wdi_safety_time");
	UpdateClient(ARRAY_GAMEINFO, CLIENT_SAFETIMER, gameinfo[0]);
	
	gameinfo[CLIENT_GAMESTATE] = GAMESTATE_WAITFORPLAYERS;
	UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
	
	while(PlayerCount() < 2 && !DEBUG) Delay(1);
	gameinfo[CLIENT_GAMESTATE] = GAMESTATE_SAFETYCOUNTDOWN;
	UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
	
	//ResetInventory();
	
	// safety period
	while(gameinfo[CLIENT_SAFETIMER] > 0)
	{
		SetPlayerProperty(1,1,PROP_INVULNERABILITY);
		SetPlayerProperty(1,0,PROP_FROZEN);
		SetPlayerProperty(1,0,PROP_TOTALLYFROZEN);
		SetPlayerProperty(1,0,PROP_FLY);
		gameinfo[CLIENT_GAMESTATE] = GAMESTATE_SAFETYCOUNTDOWN;
		UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
		Delay(35);
		if(PlayerCount() < 2)
		{
			gameinfo[CLIENT_SAFETIMER] = GetCVar("wdi_safety_time");
			UpdateClient(ARRAY_GAMEINFO, CLIENT_SAFETIMER, gameinfo[0]);
			
			gameinfo[CLIENT_GAMESTATE] = GAMESTATE_WAITFORPLAYERS;
			UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
			restart;
		}
		gameinfo[CLIENT_SAFETIMER]--;
		UpdateClient(ARRAY_GAMEINFO, CLIENT_SAFETIMER, gameinfo[0]);
	}

	dwindlemessage = FALSE;
	UpdateClient(4, 0, dwindlemessage);
	
	gameinfo[1] = GAMESTATE_MURDERCHOOSE;
	UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
	
	//reset all statistics, mostly useful if a new murderer has to be chosen.
	for(int b = 0;b < 6;b++)
	{
		murdinfo[b] = 0;
		UpdateClient(ARRAY_MURDINFO, b, murdinfo[b]);
	}
	
	for(int b2 = 0;b2 < 5;b2++)
	{
		playinfo[b2] = 0;
		UpdateClient(ARRAY_PLAYINFO, b2, playinfo[b2]);
	}

	// choose a murderer
	Delay(128);
	While(!WDI_MurderChooser()) Delay(1); // This'll loop until a murderer is chosen (function returns success)
	playinfo[1] = WDI_CountInnocents();
	playinfo[0] = playinfo[1];
	playinfo[5] = playinfo[1];
	UpdateClient(ARRAY_PLAYINFO, CLIENT_CIVCOUNT, playinfo[0]);
	UpdateClient(ARRAY_PLAYINFO, CLIENT_CIVMAX, playinfo[1]);
	UpdateClient(ARRAY_PLAYINFO, CLIENT_STARTPLAYERS, playinfo[5]);
	gameinfo[1] = GAMESTATE_GAMEACTIVE;
	UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
	SetPlayerProperty(1,0,PROP_INVULNERABILITY);
	remainingpercentage = (FixedDiv(Int2Fix(playinfo[0]),Int2Fix(playinfo[1])) * 100) >> 16;
	UpdateClient(3, 0, remainingpercentage);
	
	for(int f = 0; f < 32; f++)
	{
		if(f != gameinfo[2])
			GiveActorInventory(TID_START+f, "MarkMe", 1);
	}
	
	int loopcount = 0;
	while(gameinfo[1] == GAMESTATE_GAMEACTIVE)	// now the actual game begins
	{
		SetPlayerProperty(1,0,PROP_INVULNERABILITY);
		if(!murdinfo[0])
		{
			Setfont("BigFont");
			HudMessageBold(s:"The Murderer has left the game. Selecting a new murderer..."; HUDMSG_PLAIN|HUDMSG_LOG, 2005, CR_RED, 0.5, 0.35, 3.0);
			if(PlayerCount() < 2)
			{			
				PrintBold(s:"Not enough players left, ending map!");
				Delay(15);
				Exit_Normal(0);
				Delay(1);
				Terminate;
			}
			for(int u = 0; u < 32; u++)
			{
				TakeActorInventory(TID_START+u, "KillMarker", 999); // This fixes issues with tallyboard miscounts
				TakeActorInventory(TID_START+u, "TKToken", 999);
			}
			SetMusic("*");
			tallycounts[0] = 0;
			tallycounts[1] = 0;
			tallycounts[2] = 0;
			tallycounts[3] = 0;
			playinfo[3] = 0;
			ResetMap();
			ResetHealth();
			//ResetInventory();
			restart;
			break;
		}
		loopcount++;
		if(loopcount >= 15)		// this drains the murderer's sanity
		{
			TakeActorInventory(TID_START+gameinfo[2], "MadMeter", 1);
			loopcount = 0;
		}
		
		// if he's out of sanity, kill him
		if(CheckActorInventory(TID_START+gameinfo[2], "MurderMarker") && CheckActorInventory(TID_START+gameinfo[2], "MadMeter") <= 0)
		{
			murdinfo[1] = CheckActorInventory(TID_START+gameinfo[2], "TripUsed");
			murdinfo[2] = CheckActorInventory(TID_START+gameinfo[2], "GasUsed");
			murdinfo[3] = CheckActorInventory(TID_START+gameinfo[2], "SmokeUsed");
			murdinfo[4] = CheckActorInventory(TID_START+gameinfo[2], "FakeStimUsed"); 
			murdinfo[5] = CheckActorInventory(TID_START+gameinfo[2], "NoiseMakerUsed");
			murdinfo[6] = CheckActorInventory(TID_START+gameinfo[2], "StimUsed"); 
			murdinfo[7] = CheckActorInventory(TID_START+gameinfo[2], "BackStabCount"); 
			Thing_Destroy(TID_START+gameinfo[2], true);
			playinfo[4] = END_MURSUICIDE;
			UpdateClient(ARRAY_PLAYINFO, CLIENT_ENDING, playinfo[4]);
			gameinfo[1] = GAMESTATE_GAMEOVER;
			UpdateClient(ARRAY_GAMEINFO, CLIENT_GAMESTATE, gameinfo[1]);
		}
		if(playinfo[0] <= 0)
		{
			playinfo[4] = END_INOLOSE;
			UpdateClient(ARRAY_PLAYINFO,CLIENT_ENDING, playinfo[4]);
			gameinfo[1] = GAMESTATE_GAMEOVER;
			UpdateClient(ARRAY_GAMEINFO,CLIENT_GAMESTATE, gameinfo[1]);
		}
		Delay(1);
	}
	
	ACS_Execute(412,0,0,0,0);
	ACS_Execute(413,0,0,0,0);
	
	SetMusic("");
	Switch(playinfo[4])
	{
		Case END_INOLOSE:
		AmbientSound("D_CTTAL1",127);
		break;
	
		Case END_MURLOSE:
		AmbientSound("D_CTTAL2",127);
		break;  

		Case END_MURSUICIDE:
		AmbientSound("D_CTTAL2",127);
		break;        
	}
	
	SetPlayerProperty(1,1,PROP_TOTALLYFROZEN);
	SetPlayerProperty(1,1,PROP_INVULNERABILITY);
	
	SethudSize(640, 480, 0); //320.0, 240.0 center.
	setfont("Smallfont");
	HudMessageBold(s:"End game tally for:"; HUDMSG_FADEINOUT, 0, CR_RED, 320.0, 16.0, 35.0, 1.0, 1.0);
	Delay(35*4);
	//=== Murderer Name ===//
	setfont("Bigfont");
	HudMessageBold(s:"\cc---", n:gameinfo[2]+1, s:"\cc---";  HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.0, 32.0, 35.0, 1.0);
	
	tallycounts[1] -= tallycounts[0]; // Subtract the murderer's kills from the total game kills to get the amount of Team Kills.

	//=== Murderer Info (Health / Sanity) / Suicide, etc ===//
	int thehero = -1;
	switch(playinfo[4])
	{
		Case END_INOLOSE: //Murderer Wins
			tallycounts[0] = CheckActorInventory(TID_START+gameinfo[2], "KillMarker");
			murdinfo[1] = CheckActorInventory(TID_START+gameinfo[2], "TripUsed");
			murdinfo[2] = CheckActorInventory(TID_START+gameinfo[2], "GasUsed");
			murdinfo[3] = CheckActorInventory(TID_START+gameinfo[2], "SmokeUsed");
			murdinfo[4] = CheckActorInventory(TID_START+gameinfo[2], "FakeStimUsed"); 
			murdinfo[5] = CheckActorInventory(TID_START+gameinfo[2], "NoiseMakerUsed");
			murdinfo[6] = CheckActorInventory(TID_START+gameinfo[2], "StimUsed"); 
			murdinfo[7] = CheckActorInventory(TID_START+gameinfo[2], "BackStabCount"); 
			HudMessageBold(s:"GAME OVER: ", n:gameinfo[2]+1, s:" \ccwins with a score of \ck", d:(FixedDiv(Int2Fix(wdi_scoreplayer()),Int2Fix(10 * playinfo[1])) * 100) >> 16, s:"%", s:" (", d:wdi_scoreplayer(), s:" / ", d:(10 * playinfo[1]), s:") ";  HUDMSG_PLAIN | HUDMSG_LOG, 1, CR_WHITE, 0.0, 0.0, 0.001);
			HudMessageBold(s:""; HUDMSG_PLAIN, 1, CR_WHITE, 0.0, 0.0, 0.1);
			setfont("Smallfont");
			HudMessageBold(s:"\cgHealth: ", d:tallycounts[3], s:" / ", d:(FixedDiv(Int2Fix(tallycounts[2]),Int2Fix(500)) * 100) >> 16, s:"% :Sanity";  HUDMSG_FADEOUT, 0, CR_RED, 320.0, 44.0, 35.0, 1.0);
			break;
			
		Case END_MURLOSE: //Killed
			setfont("Smallfont");
			for(int k = 0;k < 32; k++)
			{
				if(CheckActorInventory(TID_START+k, "Hero"))
				{
					thehero = k;
					break;
				}
			}
			if(thehero == gameinfo[2] || thehero == -1) HudMessageBold(s:"Self-Victim";  HUDMSG_FADEOUT, 0, CR_RED, 320.0, 44.0, 35.0, 1.0);
			if(thehero != gameinfo[2] && thehero != -1)
			{
				HudMessageBold(s:"Killed by:";  HUDMSG_FADEOUT, 0, CR_RED, 320.0, 44.0, 35.0, 1.0);
				HudMessageBold(s:"\cc---", n:thehero+1, s:"\cc---";  HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.0, 52.0, 35.0, 1.0);
			}
			// Put this at the end so it shows the killer's name properly
			HudMessageBold(s:"GAME OVER: ", n:gameinfo[2]+1, s:" \ccwas killed by ", n:thehero+1, s:" \ccand scored \ck", d:(FixedDiv(Int2Fix(wdi_scoreplayer()),Int2Fix(10 * playinfo[1])) * 100) >> 16, s:"%", s:" (", d:wdi_scoreplayer(), s:" / ", d:(10 * playinfo[1]), s:") ";  HUDMSG_PLAIN | HUDMSG_LOG, 1, CR_WHITE, 0.0, 0.0, 0.001);
			HudMessageBold(s:""; HUDMSG_PLAIN, 1, CR_WHITE, 0.0, 0.0, 0.1);
			break;
			
		Case END_MURSUICIDE: //Suicide (By Sanity loss or otherwise)
			HudMessageBold(s:"GAME OVER: ", n:gameinfo[2]+1, s:" \ccran out of sanity and scored \ck", d:(FixedDiv(Int2Fix(wdi_scoreplayer()),Int2Fix(10 * playinfo[1])) * 100) >> 16, s:"%", s:" (", d:wdi_scoreplayer(), s:" / ", d:(10 * playinfo[1]), s:") ";  HUDMSG_LOG, 0, CR_WHITE, 0.0, 0.0, 0.001);
			HudMessageBold(s:""; HUDMSG_PLAIN, 1, CR_WHITE, 0.0, 0.0, 0.1);
			setfont("Smallfont");
			HudMessageBold(s:"Mental Breakdown";  HUDMSG_FADEOUT, 0, CR_RED, 320.0, 44.0, 35.0, 1.0);
			break;
	}

	delay(35*4);
	//=== Tallying ===//

	//Personal Kills
	setfont("Bigfont");
	HudMessageBold(s:"\cg-Personal Victims- "; HUDMSG_FADEOUT, 0, CR_RED, 320.0, 78.0, 35.0, 1.0);

	delay(35);

	setfont("Bigfont");
	HudMessageBold(d:tallycounts[0], s:" out of ", d:playinfo[1];  HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.0, 98.0, 35.0, 1.0);
	setfont("Smallfont");
	HudMessageBold(d:murdinfo[7], s:" Backstab victims";  HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 124.0, 35.0, 1.0);
	setfont("Smallfont");
	HudMessageBold(d:((FixedDiv(Int2Fix(tallycounts[0]),Int2Fix(playinfo[1])) * 100) >> 16), s:"%";  HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 110.0, 35.0, 1.0);

	delay(35);

	//Paranoia kills
	setfont("Bigfont");
	HudMessageBold(s:"\cg-Paranoia Victims- "; HUDMSG_FADEOUT, 0, CR_RED, 320.0, 144.0, 35.0, 1.0);

	delay(35);
	
	setfont("Bigfont");
	tallycounts[1] = max(tallycounts[1], 0);
	HudMessageBold(d:tallycounts[1], s:" out of ", d:playinfo[1];  HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.0, 164.0, 35.0, 1.0);
	setfont("Smallfont");
	HudMessageBold(d:((FixedDiv(Int2Fix(tallycounts[1]),Int2Fix(playinfo[1])) * 100) >> 16), s:"%";  HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 176.0, 35.0, 1.0);

	delay(35);

	//Disconnects (lolololol RAGEQUIT)
	setfont("Bigfont");
	HudMessageBold(s:"\cg-Disconnects- "; HUDMSG_FADEOUT, 0, CR_RED, 320.0, 210.0, 35.0, 1.0);

	delay(35);

	setfont("Bigfont");
	HudMessageBold(d:playinfo[3], s:" out of ", d:playinfo[5];  HUDMSG_FADEOUT, 0, CR_UNTRANSLATED, 320.0, 230.0, 35.0, 1.0);
	setfont("Smallfont");
	HudMessageBold(d:((FixedDiv(Int2Fix(playinfo[3]),Int2Fix(playinfo[5])) * 100) >> 16), s:"%";  HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 242.0, 35.0, 1.0);

	delay(35);

	//=== Item Useage ===//
	setfont("Smallfont");
	HudMessageBold(s:"--Items Used-- "; HUDMSG_FADEOUT, 0, CR_RED, 320.0, 266.0, 35.0, 1.0);

	HudMessageBold(s:"\ccBertholite"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 224.0, 278.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[2]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 224.0, 286.0, 35.0, 1.0, 1.0);

	HudMessageBold(s:"\ccSmoke Bomb"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 320.0, 278.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[3]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 320.0, 286.0, 35.0, 1.0, 1.0);

	HudMessageBold(s:"\ccTrip Shotgun"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 416.0, 278.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[1]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 416.0, 286.0, 35.0, 1.0, 1.0);

	HudMessageBold(s:"\ccMedkit"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 320.0, 296.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[6]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 320.0, 304.0, 35.0, 1.0, 1.0);
	
	HudMessageBold(s:"\ccFake Stimpack"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 416.0, 296.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[4]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 416.0, 304.0, 35.0, 1.0, 1.0);
	
	HudMessageBold(s:"\ccSound Emitter"; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 224.0, 296.0, 35.0, 1.0, 1.0);
	HudMessageBold(d:murdinfo[5]; HUDMSG_FADEINOUT, 0, CR_UNTRANSLATED, 224.0, 304.0, 35.0, 1.0, 1.0);

	delay(35*3);

	//=== Ranking ===//
	setfont("Bigfont");
	HudMessageBold(s:"\cc---\cgRanking\cc---"; HUDMSG_FADEOUT, 0, CR_RED, 320.0, 324.0, 35.0, 1.0);
	delay(35*3);
	int percentage = (FixedDiv(Int2Fix(wdi_scoreplayer()),Int2Fix(10 * playinfo[1])) * 100) >> 16;
	setfont("Bigfont");
	HudMessageBold(d:(FixedDiv(Int2Fix(wdi_scoreplayer()),Int2Fix(10 * playinfo[1])) * 100) >> 16, s:"%"; HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 342.0, 35.0, 1.0);
	Setfont("SMALLFONT");
	HudMessageBold(d:wdi_scoreplayer(), s:" / ", d:(10 * playinfo[1]); HUDMSG_FADEOUT, 0, CR_WHITE, 320.0, 365.0, 35.0, 1.0);
	SethudSize(1920, 1080, 0);
	wdi_showmedalrank(percentage);

	delay(35*5);

	//=== End Map ===//
	SethudSize(640, 480, 0);
	setfont("Bigfont");
	HudMessageBold(s:"Going to next map..."; HUDMSG_FADEINOUT, 0, CR_RED, 320.0, 420.0, 35.0, 1.0, 1.0);
	Delay(35 * 5);
	ResetInventory();
	Delay(2);
	Exit_Normal(0);
	Delay(1);
	Terminate;
}

Script 401 Enter net Clientside // This script controls HUD-related stuff, like messages and text.
{
	if(GameType() == GAME_TITLE_MAP) Terminate;
	bool tenseshown = FALSE;
	While(1)
	{
		Switch(gameinfo[1])
		{
			Case GAMESTATE_WAITFORPLAYERS:
				Setfont("BigFont");
				HudMessage(s:"WAITING FOR PLAYERS..."; HUDMSG_PLAIN, 2000, CR_RED, 0.5, 0.85, 0);
				HudMessage(s:""; HUDMSG_PLAIN, 2001, CR_WHITE, 0.0, 0.0, 0.1);
				HudMessage(s:""; HUDMSG_PLAIN, 2002, CR_WHITE, 0.0, 0.0, 0.1);
				Setfont("SmallFont");
				While(gameinfo[1] == GAMESTATE_WAITFORPLAYERS) Delay(1);
				break;

			Case GAMESTATE_SAFETYCOUNTDOWN:
				tenseshown = FALSE;
				Setfont("BigFont");
				HudMessage(s:"SAFETY"; HUDMSG_PLAIN, 2000, CR_RED, 0.5, 0.85, 0);
				LocalAmbientSound("Game/CountStart",127);
				Setfont("SmallFont");
				HudMessage(s:"Players cannot harm eachother until a murderer is chosen..."; HUDMSG_PLAIN, 2001, CR_WHITE, 0.5, 0.88, 0);
				ACS_Execute(414,0,0,0,0);
				While(gameinfo[1] == GAMESTATE_SAFETYCOUNTDOWN)
				{
					HudMessage(d:gameinfo[0]; HUDMSG_PLAIN, 2002, CR_WHITE, 0.5, 0.9, 0);
					Delay(1);
					//if(tiptime == 0) HudMessage(s:InoTip[Random(0,16)]; HUDMSG_PLAIN, 2083 + PlayerNumber(), CR_WHITE, 0.5, 0.8, 12.0);
					//tiptime++;
					//if(tiptime >= (35 * 10)) tiptime = 0;
				}
				break;

			Case GAMESTATE_MURDERCHOOSE:
				if(tenseshown) break;
				tenseshown = TRUE;
				HudMessage(s:""; HUDMSG_PLAIN, 2001, CR_WHITE, 0.0, 0.0, 0.1);
				HudMessage(s:""; HUDMSG_PLAIN, 2002, CR_WHITE, 0.0, 0.0, 0.1);
				HudMessage(s:""; HUDMSG_PLAIN, 2003, CR_WHITE, 0.0, 0.0, 0.1);
				Setfont("SmallFont");
				Hudmessage(s:"a murderer has been chosen."; HUDMSG_FADEOUT, 2004, CR_WHITE, 0.5, 0.5, 6.5, 1.0);
				Delay(35);
				Setfont("SmallFont");
				Hudmessage(s:"a murderer has been chosen.."; HUDMSG_FADEOUT, 2004, CR_WHITE, 0.5, 0.5, 6.5, 1.0);
				Delay(35);
				Setfont("SmallFont");
				Hudmessage(s:"a murderer has been chosen..."; HUDMSG_FADEOUT, 2004, CR_WHITE, 0.5, 0.5, 4.5, 1.0);
				Delay(60);
				break;

			Case GAMESTATE_GAMEACTIVE:
				HudMessage(s:""; HUDMSG_PLAIN, 2000, CR_WHITE, 0.0, 0.0, 0.1);
				HudMessage(s:""; HUDMSG_PLAIN, 2001, CR_WHITE, 0.0, 0.0, 0.1);
				HudMessage(s:""; HUDMSG_PLAIN, 2002, CR_WHITE, 0.0, 0.0, 0.1);
				if(gameinfo[2] == PlayerNumber())
				{
					LocalAmbientSound("Game/MurdererChosen",127);
					Setfont("SmallFont");
					HudMessage(s:MurTip[Random(0,18)]; HUDMSG_PLAIN, 2004, CR_WHITE, 0.5, 0.8, 5.0);
					Setfont("BigFont");
					Hudmessage(s:"... and it's you!"; HUDMSG_FADEOUT, 2003, CR_RED, 0.5, 0.55, 6.5, 1.0); //Murderer message
					//ACS_Execute(416,0,0,0,0);
				}
				for(int i = 0; i < 32; i++)
				{
					if(i != gameinfo[2])
						GiveActorInventory(TID_START+i, "MarkMe", 1);
				}
				While(gameinfo[1] == GAMESTATE_GAMEACTIVE)
				{
					Delay(1);
					/*
					if(CheckActorInventory(ActivatorTID(), "MurderMarker"))
					{
						if(remainingpercentage <= 28 || (playinfo[0] <= 2))
						{
							for(int m = 0; m < 32; m++)
							{
								//if(CheckActorInventory(TID_START+m,"MurderMarker"))
								//	continue;
								
								if(CheckActorInventory(TID_START+m, "MarkMe"))
									HudMessageOnActor(TID_START+m,7200.0,"INNOMARK","",3515+m);
							}
						}
					}
					*/
				}
				break;

			Case GAMESTATE_GAMEOVER:
				FadeTo(0, 0, 0, 1.0, 2.0);
				Delay(70);
				break;
		}
		Delay(1);
	}
}

Script 406 Death
{
	SetActorProperty(ActivatorTID(), APROP_RenderStyle, STYLE_None);
	TakeActorInventory(TID_START + gameinfo[2], "TKToken", 3);
	
	TakeActorInventory(ActivatorTID(), "MarkMe", 1);
	
	WDI_DropPlayerWeapon(ActivatorTID());
	
	if(gameinfo[1] == GAMESTATE_GAMEACTIVE)
	{
		AmbientSound("DeathNote", 128);
		died[PlayerNumber()] = TRUE; 
		if(CheckActorInventory(TID_START+gameinfo[2], "MurderMarker") && CheckActorInventory(TID_START+gameinfo[2], "MadMeter"))
		{
			tallycounts[0] = CheckActorInventory(TID_START+gameinfo[2], "KillMarker");
			//TakeActorInventory(TID_START+gameinfo[2],"KillMarker",999);
			murdinfo[1] = CheckActorInventory(TID_START+gameinfo[2], "TripUsed");
			murdinfo[2] = CheckActorInventory(TID_START+gameinfo[2], "GasUsed");
			murdinfo[3] = CheckActorInventory(TID_START+gameinfo[2], "SmokeUsed");
			murdinfo[4] = CheckActorInventory(TID_START+gameinfo[2], "FakeStimUsed"); 
			murdinfo[5] = CheckActorInventory(TID_START+gameinfo[2], "NoiseMakerUsed");
			murdinfo[6] = CheckActorInventory(TID_START+gameinfo[2], "StimUsed"); 
			murdinfo[7] = CheckActorInventory(TID_START+gameinfo[2], "BackStabCount"); 
		}
		
		if(!CheckInventory("MurderMarker"))
		{
			Delay(1);
			tallycounts[1]++;
			playinfo[0]--;
			UpdateClient(ARRAY_PLAYINFO, CLIENT_CIVCOUNT, playinfo[0]);
			if(playinfo[0] == 0) remainingpercentage = 0;
			if(playinfo[0] != 0) remainingpercentage = (FixedDiv(Int2Fix(playinfo[0]),Int2Fix(playinfo[1])) * 100) >> 16;
			UpdateClient(3, 0, remainingpercentage);
			if(((remainingpercentage <= 28 && remainingpercentage != 0) || (playinfo[0] <= 2 && playinfo[0] > 0)) && !dwindlemessage)
			{
				SetFont("BIGFONT");
				HudMessageBold(s:"The Innocent's numbers are dwindling..."; HUDMSG_PLAIN|HUDMSG_LOG, 0, CR_RED, 0.5, 0.3, 3.0);
				int odds = Random(1,100);
				if(odds >= 99)
					ACS_Execute(415,0,0,0,0);
					
				else
				{
					if(custom_finale == true)
					{
						SetMusic(finalesong);
					}
					
					else
					{
						int ran = Random(0, 4);
						SetMusic(default_songs[ran]);
					}
				}
				
				dwindlemessage = TRUE;
				UpdateClient(4, 0, dwindlemessage);
			}
		}
	
		if(PlayerNumber() == gameinfo[2] && CheckActorInventory(TID_START+gameinfo[2], "MadMeter") > 0)
		{
			playinfo[4] = END_MURLOSE;
			UpdateClient(ARRAY_PLAYINFO,CLIENT_ENDING, playinfo[4]);
			gameinfo[1] = GAMESTATE_GAMEOVER;
			UpdateClient(ARRAY_GAMEINFO,CLIENT_GAMESTATE, gameinfo[1]);
		}
	}
}

script 409 (Void)
{
	GiveActorInventory(TID_START+gameinfo[2], "KillMarker", 1);
	GiveActorInventory(TID_START+gameinfo[2], "GetSuperSane", 1);
}

Script 411 Enter // This script handles all TK-related penalties
{
	while(!CheckActorInventory(TID_START+PlayerNumber(), "TKToken")) Delay(1);
	if(CheckActorInventory(TID_START+PlayerNumber(), "MurderMarker") || CheckActorInventory(TID_START+PlayerNumber(), "ScriptDeath"))
	{
		TakeActorInventory(TID_START+PlayerNumber(), "TKToken", 999);
		Terminate;
	}
	if(CheckActorInventory(TID_START+PlayerNumber(), "TKToken") == 1 && !CheckActorInventory(TID_START+PlayerNumber(), "MurderMarker"))
	{
		GiveActorInventory(TID_START+PlayerNumber(), "TKSmallKitDropper",1);
		WDI_DropPlayerWeapon_Tk(TID_START+PlayerNumber());
		
		if(GetActorProperty(TID_START+PlayerNumber(),APROP_HEALTH) < 30)
		{
			bGotABeating[PlayerNumber()] = TRUE;
			UpdateClient(7,0,bGotABeating[PlayerNumber()]);
			Setfont("SmallFont");
			Hudmessagebold(n:0, s:" \c[Red]has killed an innocent player!"; HUDMSG_FADEOUT|HUDMSG_LOG, 7, CR_UNTRANSLATED, 0.5, 0.85, 6.5, 1.0);
			Setfont("SmallFont");
			Hudmessage(s:"You killed an innocent!"; HUDMSG_FADEOUT, 7, CR_RED, 0.5, 0.85, 6.5, 1.0);
			Setfont("SmallFont");
			Hudmessage(s:"You have been penalized! Don't do it again!"; HUDMSG_FADEOUT, 8, CR_RED, 0.5, 0.88, 6.5, 1.0);
		}
		
		if(GetActorProperty(0,APROP_HEALTH) > 30)
		{
			GiveActorInventory(TID_START+PlayerNumber(), "NoRegen",1);
			Setfont("SmallFont");
			Hudmessagebold(n:0, s:" \c[Red]has killed an innocent player!"; HUDMSG_FADEOUT|HUDMSG_LOG, 7, CR_UNTRANSLATED, 0.5, 0.85, 6.5, 1.0);
			Setfont("SmallFont");
			Hudmessage(s:"You killed an innocent!"; HUDMSG_FADEOUT, 7, CR_RED, 0.5, 0.85, 6.5, 1.0);
			while((GetActorProperty(TID_START+PlayerNumber(),APROP_HEALTH) > 30) && (CheckActorInventory(TID_START+PlayerNumber(), "TKToken") < 2)) 
			{
				GiveActorInventory(TID_START+PlayerNumber(), "YellowHaloSpawner", 1);
				Delay(1);
			}
			TakeActorInventory(TID_START+PlayerNumber(), "NoRegen",1);
			bGotABeating[PlayerNumber()] = TRUE;
			UpdateClient(7,0,bGotABeating[PlayerNumber()]);
			Setfont("SmallFont");
			Hudmessagebold(n:0, s:" \c[Red]has received a beating for their actions..."; HUDMSG_FADEOUT|HUDMSG_LOG, 7, CR_UNTRANSLATED, 0.5, 0.85, 6.5, 1.0);
			Setfont("SmallFont");
			Hudmessage(s:"You have been penalized! Don't do it again..."; HUDMSG_FADEOUT, 7, CR_RED, 0.5, 0.88, 6.5, 1.0);
		}
	}
	while(CheckActorInventory(TID_START+PlayerNumber(), "TKToken") < 2) Delay(1);
	//if(CheckActorInventory(TID_START+PlayerNumber(), "TKToken") == 2 && !CheckActorInventory(TID_START+PlayerNumber(), "MurderMarker"))
	//{
	//	GiveActorInventory(TID_START+PlayerNumber(), "NoRegen",1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyGunDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyMeleeDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlySawDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyThrownDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyCueDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyShovelDamage", 100);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PowerFriendlyBurnDamage", 100);
	//	if(CheckActorInventory(TID_START+PlayerNumber(), "Shotgun2") || CheckActorInventory(TID_START+PlayerNumber(), "Beretta") || CheckActorInventory(TID_START+PlayerNumber(), "Crossbow") || CheckActorInventory(TID_START+PlayerNumber(), "M1Carbine")) TakeActorInventory(TID_START+PlayerNumber(), "Slot1Filled", 2);
	//	TakeActorInventory(TID_START+PlayerNumber(), "LeverRifle", 1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "Shotgun2", 1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "Beretta", 1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "Crossbow", 1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "M1Carbine", 1);
	//	TakeActorInventory(TID_START+PlayerNumber(), "SuperShells", 999);
	//	TakeActorInventory(TID_START+PlayerNumber(), "LoadedBolts", 999);
	//	TakeActorInventory(TID_START+PlayerNumber(), "PistolClip", 999);
	//			Setfont("SmallFont");
	//	Hudmessagebold(n:0, s:" \c[Red]has killed an innocent player!"; HUDMSG_FADEOUT|HUDMSG_LOG, 7, CR_UNTRANSLATED, 0.5, 0.85, 6.5, 1.0);
	//			Setfont("SmallFont");
	//	Hudmessage(s:"You killed an innocent!"; HUDMSG_FADEOUT, 7, CR_RED, 0.5, 0.85, 6.5, 1.0);
	//			Setfont("SmallFont");
	//	Hudmessage(s:"You are now marked for death!"; HUDMSG_FADEOUT, 8, CR_RED, 0.5, 0.88, 6.5, 1.0);
	//}
	
	//while((CheckActorInventory(TID_START+PlayerNumber(), "TKToken")) < 3 && (GetActorProperty(TID_START+PlayerNumber(),APROP_HEALTH) > 0))
	//{
	//	GiveActorInventory(TID_START+PlayerNumber(), "RedHaloSpawner", 1);
	//	Delay(1);
	//}
	
	//if(CheckActorInventory(TID_START+PlayerNumber(), "TKToken") >= 3 && !CheckActorInventory(TID_START+PlayerNumber(), "MurderMarker"))
	if(CheckActorInventory(TID_START+PlayerNumber(), "TKToken") >= 2 && !CheckActorInventory(TID_START+PlayerNumber(), "MurderMarker"))
	{
				Setfont("SmallFont");
		Hudmessagebold(n:0, s:" \c[Red]has killed an innocent player and was removed from the game!"; HUDMSG_FADEOUT|HUDMSG_LOG, 7, CR_UNTRANSLATED, 0.5, 0.85, 6.5, 1.0);
				Setfont("SmallFont");
		Hudmessage(s:"You killed an innocent!"; HUDMSG_FADEOUT, 7, CR_RED, 0.5, 0.85, 6.5, 1.0);
		Thing_Destroy(TID_START+PlayerNumber(), true);
				Setfont("SmallFont");
		Hudmessage(s:"You have been removed from the game for your mistakes..."; HUDMSG_FADEOUT, 8, CR_RED, 0.5, 0.88, 6.5, 1.0);
	}
}

Script 412 (void)
{
	if(WDI_Ending() == END_INOLOSE)
		while(GetActorProperty(TID_START+WDI_MurdID(), APROP_HEALTH) > 0) Delay(1);
		
	else if(WDI_Ending() != END_INOLOSE)
		while(PlayerCount() > 0) Delay(1);
		
	PrintBold(s:"No players left, ending map!");
	Delay(15);
	Exit_Normal(0);
	Delay(1);
	Terminate;
}

// Fade All Players
Script 413 (void)
{
	if(doendfade == false) terminate;
	
	for(int i = 0; i < 32; i++)
	{
		SetActivator(TID_START + i);
		FadeTo(0, 0, 0, 1.0, 3.0);
	}

	Delay(35 * 3);
	
	for(int v = 0; v < 32; v++)
	{
		SetActivator(TID_START + v);
		FadeTo(0, 0, 0, 1.0, 3.0);
	}
	
	Delay(35 * 3);
	
	for(int g = 0; g < 32; g++)
	{
		SetActivator(TID_START + g);
		FadeTo(0, 0, 0, 1.0, 3.0);
	}
}

Script 414 (void) net clientside
{
	int tiptime = 0;
	While(gameinfo[1] == GAMESTATE_SAFETYCOUNTDOWN)
	{
		Delay(1);
		if(tiptime == 0)
		{
			Setfont("SmallFont");
			HudMessageBold(s:InoTip[Random(0,16)]; HUDMSG_PLAIN, 2083 + PlayerNumber(), CR_WHITE, 0.5, 0.8, 12.0);
		}
		tiptime++;
		if(tiptime >= (35 * 10)) tiptime = 0;
	}
}

Script 415 (void)
{
	int odds = Random(0,4);
	SetMusic("");
	AmbientSound("D_FATE", 127);
	Delay(28 * 35);
	
	if(custom_finale == true)
		SetMusic(finalesong);
	
	else
		SetMusic(default_songs[odds]);
}

Script 416 (void) net clientside
{
	SetActorState(256, "On", TRUE);
	SetActorState(257, "On", TRUE);
	//Thing_Activate(256);
	//Thing_Activate(257);
}

Script 417 (void)
{
	tallycounts[2] = CheckActorInventory(TID_START+gameinfo[2], "MadMeter");
	tallycounts[3] = GetActorProperty(TID_START+gameinfo[2], APROP_HEALTH);
}

Script 418 (void)
{
	WDI_DropPlayerWeapon_Live(ActivatorTID());
}

Script 419 Enter
{
	while(WDI_GameState() != GAMESTATE_GAMEOVER)
	{
		while(WDI_GameState() != GAMESTATE_GAMEACTIVE) delay(1);
		Delay(35);
		
		//if(!CheckActorInventory(ActivatorTID(), "MurderMarker")) Terminate;
		
		While(WDI_GameState() == GAMESTATE_GAMEACTIVE)
		{
			Delay(1);
			if(CheckActorInventory(ActivatorTID(), "MurderMarker"))
			{
				if(remainingpercentage <= 28 || (playinfo[0] <= 2) || forcetracker == true)
				{
					for(int m = 0; m < 32; m++)
					{
						//if(CheckActorInventory(TID_START+m,"MurderMarker"))
						//	continue;
						
						if(CheckActorInventory(TID_START+m, "MarkMe"))
							HudMessageOnActor(TID_START+m,16000.0,"INNOMARK","",3515+m);
					}
				}
			}
		}
	}
}